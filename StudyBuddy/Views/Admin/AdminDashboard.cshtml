@model List<StudyBuddy.Controllers.AdminController.UserWithBlockStatus>
@using StudyBuddy.Shared.Models


@{
    Layout = "_AdminLayout";
    ViewBag.Title = "Admin Dashboard";
}
<!DOCTYPE html>
<html>
<head>
    <meta name="viewport" content="width=device-width, initial-scale=1.0" />
    <title>Dashboard</title>
    <link href="https://stackpath.bootstrapcdn.com/bootstrap/4.3.1/css/bootstrap.min.css" rel="stylesheet" />
    <style>
        .duration-cell {
            white-space: nowrap;
            overflow: hidden;
            text-overflow: ellipsis;
            max-width: 150px;
        }

        .center-text {
            text-align: center;
        }

        .form-group-center {
            display: flex;
            justify-content: center;
            align-items: center;
        }
    </style>
    <script src="https://cdn.jsdelivr.net/npm/chart.js"></script>
</head>
<body>
    <div class="container">
        <h1>Dashboard</h1>
        <div class="row">
            <div class="col-md-12">
                <canvas id="myChart"></canvas>
            </div>
        </div>
        <div class="row mt-3">
            <div class="col-md-12">
                <div class="form-group form-group-center">
                    <div class="form-check form-check-inline">
                        <input type="checkbox" class="form-check-input" name="userFilter" value="blocked" id="blockedUsers">
                        <label class="form-check-label" for="blockedUsers">Blocked users</label>
                    </div>
                    <div class="form-check form-check-inline">
                        <input type="checkbox" class="form-check-input" name="userFilter" value="active" id="activeUsers">
                        <label class="form-check-label" for="activeUsers">Active users</label>
                    </div>
                </div>
                <table class="table center-text">
                    <thead>
                        <tr>
                            <th>Name</th>
                            <th>Id</th>
                            <th>State</th>
                            <th>Action</th>
                            <th>Duration</th>
                        </tr>
                    </thead>
                    <tbody>
                        @foreach (var item in Model)
                        {
                            <tr>
                                <td>@item.User.Username</td>
                                <td>@item.User.Id</td>
                                <td>@(item.IsBlocked ? "Blocked" : "Active")</td>
                                <td>
                                    <button class="btn btn-warning">Block</button>
                                    <button class="btn btn-danger">Delete</button>
                                </td>
                                <td class="duration-cell center-text">@(item.IsBlocked ? item.BlockedUntil?.ToString("G") ?? "-" : "-")</td>
                            </tr>
                        }
                    </tbody>
                </table>
            </div>
        </div>
    </div>

    <script>
        document.addEventListener('DOMContentLoaded', function () {
            const blockedCheckbox = document.getElementById('blockedUsers');
            const activeCheckbox = document.getElementById('activeUsers');

            const tableRows = document.querySelectorAll('table tbody tr');
            let activeCount = 0;
            let blockedCount = 0;

            tableRows.forEach(row => {
                const state = row.cells[2].textContent;
                if (state === 'Active') {
                    activeCount++;
                } else if (state === 'Blocked') {
                    blockedCount++;
                }
            });

            const ctx = document.getElementById('myChart').getContext('2d');
            const myChart = new Chart(ctx, {
                type: 'bar',
                data: {
                    labels: [],
                    datasets: [{
                        data: [],
                        backgroundColor: [],
                        borderColor: [],
                        borderWidth: 1
                    }]
                },
                options: {
                    scales: {
                        y: {
                            beginAtZero: true
                        }
                    },
                    plugins: {
                        legend: {
                            display: false
                        }
                    }
                }
            });

            function updateChart() {
                myChart.data.labels = [];
                myChart.data.datasets[0].data = [];
                myChart.data.datasets[0].backgroundColor = [];
                myChart.data.datasets[0].borderColor = [];

                if (blockedCheckbox.checked) {
                    myChart.data.labels.push('Blocked users');
                    myChart.data.datasets[0].data.push(blockedCount);
                    myChart.data.datasets[0].backgroundColor.push('rgba(255, 99, 132, 0.2)');
                    myChart.data.datasets[0].borderColor.push('rgba(255, 99, 132, 1)');
                }
                if (activeCheckbox.checked) {
                    myChart.data.labels.push('Active users');
                    myChart.data.datasets[0].data.push(activeCount);
                    myChart.data.datasets[0].backgroundColor.push('rgba(54, 162, 235, 0.2)');
                    myChart.data.datasets[0].borderColor.push('rgba(54, 162, 235, 1)');
                }
                myChart.update();
            }

            blockedCheckbox.addEventListener('change', updateChart);
            activeCheckbox.addEventListener('change', updateChart);

            // Initialize chart with both datasets
            blockedCheckbox.checked = true;
            activeCheckbox.checked = true;
            updateChart();
        });
    </script>
</body>
</html>
