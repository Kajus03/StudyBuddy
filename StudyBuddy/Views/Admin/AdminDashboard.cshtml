@model List<StudyBuddy.Controllers.AdminController.UserWithBlockStatus>
@using StudyBuddy.Shared.Models

@{
    Layout = "_AdminLayout";
}

<!DOCTYPE html>
<html lang="en">
<head>
    <meta name="viewport" content="width=device-width, initial-scale=1.0" />
    <title>Dashboard</title>
    <link href="https://stackpath.bootstrapcdn.com/bootstrap/4.3.1/css/bootstrap.min.css" rel="stylesheet" />
    <style>
        .duration-cell {
            white-space: nowrap;
            overflow: hidden;
            text-overflow: ellipsis;
            max-width: 150px;
        }

        .center-text {
            text-align: center;
        }

        .form-group-center {
            display: flex;
            justify-content: center;
            align-items: center;
        }
        .modal-dialog-centered {
            display: flex;
            align-items: center;
            min-height: calc(100% - 1rem);
        }

        .modal-content {
            margin: auto;
        }

        .d-flex {
            display: flex;
        }

        .align-items-center {
            align-items: center;
        }

        .mr-2 {
            margin-right: .5rem;
        }

        .ml-2 {
            margin-left: 1rem;
        }

        .date-input {
            width: 50%; 
        }
    </style>
    <script src="https://cdn.jsdelivr.net/npm/chart.js"></script>
    <script src="https://code.jquery.com/jquery-3.3.1.min.js"></script>
    <script src="https://cdnjs.cloudflare.com/ajax/libs/popper.js/1.14.7/umd/popper.min.js"></script>
    <script src="https://stackpath.bootstrapcdn.com/bootstrap/4.3.1/js/bootstrap.min.js"></script>
</head>
<body>
    <div class="container">
        <h1>Dashboard</h1>
        <div class="row">
            <div class="col-md-12">
                <canvas id="myChart"></canvas>
            </div>
        </div>
        <div class="row mt-3">
            <div class="col-md-12">
                <div class="form-group form-group-center">
                    <div class="form-check form-check-inline">
                        <input type="checkbox" class="form-check-input" name="userFilter" value="blocked" id="blockedUsers">
                        <label class="form-check-label" for="blockedUsers">Blocked users</label>
                    </div>
                    <div class="form-check form-check-inline">
                        <input type="checkbox" class="form-check-input" name="userFilter" value="active" id="activeUsers">
                        <label class="form-check-label" for="activeUsers">Active users</label>
                    </div>
                </div>
                <table class="table center-text">
                    <thead>
                        <tr>
                            <th>Name</th>
                            <th>Id</th>
                            <th>State</th>
                            <th>Action</th>
                            <th>Duration</th>
                        </tr>
                    </thead>
                    <tbody>
                        @foreach (var item in Model)
                        {
                            <tr>
                                <td>@item.User.Username</td>
                                <td>@item.User.Id</td>
                                <td>@(item.IsBlocked ? "Blocked" : "Active")</td>
                                <td>
                                    @if (item.IsBlocked)
                                    {
                                        <button onclick="askUnblockConfirm('@item.BlockId')" class="btn btn-success">Unblock</button>
                                    }
                                    else
                                    {
                                        <button onclick="askBlockReason('@item.User.Id')" class="btn btn-warning">Block</button>
                                    }
                                    <button onclick="askDeleteConfirm('@item.User.Id')" class="btn btn-danger">Delete</button>
                                </td>
                                <td>@(item.IsBlocked ? (item.BlockedUntil.HasValue && item.BlockedUntil != DateTime.MinValue ? "Until " + @item.BlockedUntil.Value.ToString("yyyy-MM-dd") : "Indefinitely") : "-")</td>
                            </tr>
                        }
                    </tbody>
                </table>
            </div>
        </div>
    </div>

    <div class="modal fade" id="blockReasonModal" tabindex="-1" role="dialog" aria-labelledby="blockReasonModalLabel" aria-hidden="true">
        <div class="modal-dialog modal-dialog-centered" role="document">
            <div class="modal-content">
                <div class="modal-header">
                    <h5 class="modal-title" id="blockReasonModalLabel">Enter Block Reason and Duration</h5>
                    <button type="button" class="close" aria-label="Close" onclick="closeBlockReasonModal()">
                        <span aria-hidden="true">&times;</span>
                    </button>
                </div>
                <div class="modal-body">
                    <input type="text" class="form-control" id="blockReasonInput" placeholder="Reason for blocking">
                    <div class="invalid-feedback">
                        Please enter a reason for blocking.
                    </div>
                    <div class="d-flex align-items-center mt-2">
                        <input type="date" class="form-control date-input" id="blockUntilInput" placeholder="Block until (optional)" onchange="checkDate()">
                        <div class="invalid-feedback" id="blockUntilError" style="display: none;">
                            Date cannot be in the past.
                        </div>
                        <div class="form-check ml-2">
                            <input type="checkbox" class="form-check-input" id="indefiniteCheck" onchange="toggleIndefinite()">
                            <label class="form-check-label" for="indefiniteCheck"> Block Indefinitely</label>
                        </div>
                    </div>
                </div>
                <div class="modal-footer">
                    <button type="button" class="btn btn-secondary" onclick="closeBlockReasonModal()">Cancel</button>
                    <button type="button" class="btn btn-primary" onclick="submitBlock()">Block User</button>
                </div>
            </div>
        </div>
    </div>

    <div class="modal fade" id="unblockConfirmModal" tabindex="-1" role="dialog" aria-labelledby="unblockConfirmModalLabel" aria-hidden="true">
        <div class="modal-dialog modal-dialog-centered" role="document">
            <div class="modal-content">
                <div class="modal-header">
                    <h5 class="modal-title" id="unblockConfirmModalLabel">Confirm Unblock</h5>
                    <button type="button" class="close" aria-label="Close" onclick="closeUnblockConfirmModal()">
                        <span aria-hidden="true">&times;</span>
                    </button>
                </div>
                <div class="modal-body">
                    Are you sure you want to unblock this user?
                </div>
                <div class="modal-footer">
                    <button type="button" class="btn btn-secondary" onclick="closeUnblockConfirmModal()">Cancel</button>
                    <button type="button" class="btn btn-primary" onclick="submitUnblock()">Unblock User</button>
                </div>
            </div>
        </div>
    </div>

    <div class="modal fade" id="deleteConfirmModal" tabindex="-1" role="dialog" aria-labelledby="deleteConfirmModalLabel" aria-hidden="true">
        <div class="modal-dialog modal-dialog-centered" role="document">
            <div class="modal-content">
                <div class="modal-header">
                    <h5 class="modal-title" id="deleteConfirmModalLabel">Confirm Delete</h5>
                    <button type="button" class="close" aria-label="Close" onclick="closeDeleteConfirmModal()">
                        <span aria-hidden="true">&times;</span>
                    </button>
                </div>
                <div class="modal-body">
                    Are you sure you want to delete this user?
                </div>
                <div class="modal-footer">
                    <button type="button" class="btn btn-secondary" onclick="closeDeleteConfirmModal()">Cancel</button>
                    <button type="button" class="btn btn-danger" onclick="submitDelete()">Delete User</button>
                </div>
            </div>
        </div>
    </div>

    <script>
        let currentUserId = 0;
        let currentBlockId = 0;

        function askBlockReason(userId) {
            currentUserId = userId;
            $('#blockReasonModal').modal('show');
        }

        function closeBlockReasonModal() {
            currentUserId = 0;
            document.getElementById('blockReasonInput').value = '';
            document.getElementById('blockReasonInput').classList.remove('is-invalid');
            document.getElementById('blockUntilInput').value = '';
            document.getElementById('blockUntilInput').classList.remove('is-invalid');
            document.getElementById('indefiniteCheck').checked = false;
            document.getElementById('blockUntilInput').disabled = false;
            $('#blockReasonModal').modal('hide');
        }

        function checkDate() {
            const blockUntilInput = document.getElementById('blockUntilInput');
            const blockUntil = new Date(blockUntilInput.value);

            if (blockUntil < new Date()) {
                blockUntilInput.classList.add('is-invalid');
                document.getElementById('blockUntilError').style.display = 'block';
            } else {
                blockUntilInput.classList.remove('is-invalid');
                document.getElementById('blockUntilError').style.display = 'none';
            }
        }

        function toggleIndefinite() {
            const blockUntilInput = document.getElementById('blockUntilInput');
            if (document.getElementById('indefiniteCheck').checked) {
                blockUntilInput.disabled = true;
                blockUntilInput.value = '';
                blockUntilInput.classList.remove('is-invalid');
                document.getElementById('blockUntilError').style.display = 'none';
            } else {
                blockUntilInput.disabled = false;
            }
        }

        function submitBlock() {
            const reasonInput = document.getElementById('blockReasonInput');
            const reason = reasonInput.value;
            const blockUntilInput = document.getElementById('blockUntilInput');
            const blockUntil = blockUntilInput.value ? new Date(blockUntilInput.value).toISOString() : null;

            if (!reason) {
                reasonInput.classList.add('is-invalid');
                return;
            }

            if (!document.getElementById('indefiniteCheck').checked && blockUntil && new Date(blockUntilInput.value) < new Date()) {
                blockUntilInput.classList.add('is-invalid');
                document.getElementById('blockUntilError').style.display = 'block';
                return;
            }

            reasonInput.classList.remove('is-invalid');
            blockUntilInput.classList.remove('is-invalid');
            document.getElementById('blockUntilError').style.display = 'none';
            $('#blockReasonModal').modal('hide');

            document.getElementById('blockFormUserId').value = currentUserId;
            document.getElementById('blockFormReason').value = reason;
            document.getElementById('blockFormUntil').value = document.getElementById('indefiniteCheck').checked ? null : blockUntil;
            document.getElementById('blockForm').submit();
        }

        function askUnblockConfirm(blockId) {
            currentBlockId = blockId;
            $('#unblockConfirmModal').modal('show');
        }

        function closeUnblockConfirmModal() {
            currentBlockId = 0;
            $('#unblockConfirmModal').modal('hide');
        }

        function submitUnblock() {
            $('#unblockConfirmModal').modal('hide');
            document.getElementById('unblockFormBlockId').value = currentBlockId;
            document.getElementById('unblockForm').submit();
        }

        function askDeleteConfirm(userId) {
            currentUserId = userId;
            $('#deleteConfirmModal').modal('show');
        }

        function closeDeleteConfirmModal() {
            currentUserId = 0;
            $('#deleteConfirmModal').modal('hide');
        }

        function submitDelete() {
            $('#deleteConfirmModal').modal('hide');
            document.getElementById('deleteFormUserId').value = currentUserId;
            document.getElementById('deleteForm').submit();
        }

        document.addEventListener('DOMContentLoaded', function () {
            const blockedCheckbox = document.getElementById('blockedUsers');
            const activeCheckbox = document.getElementById('activeUsers');

            const tableRows = document.querySelectorAll('table tbody tr');
            let activeCount = 0;
            let blockedCount = 0;

            tableRows.forEach(row => {
                const state = row.cells[2].textContent;
                if (state === 'Active') {
                    activeCount++;
                } else if (state === 'Blocked') {
                    blockedCount++;
                }
            });

            const ctx = document.getElementById('myChart').getContext('2d');
            const myChart = new Chart(ctx, {
                type: 'bar',
                data: {
                    labels: [],
                    datasets: [{
                        data: [],
                        backgroundColor: [],
                        borderColor: [],
                        borderWidth: 1
                    }]
                },
                options: {
                    scales: {
                        y: {
                            beginAtZero: true
                        }
                    },
                    plugins: {
                        legend: {
                            display: false
                        }
                    }
                }
            });

            function updateChart() {
                myChart.data.labels = [];
                myChart.data.datasets[0].data = [];
                myChart.data.datasets[0].backgroundColor = [];
                myChart.data.datasets[0].borderColor = [];

                if (blockedCheckbox.checked) {
                    myChart.data.labels.push('Blocked users');
                    myChart.data.datasets[0].data.push(blockedCount);
                    myChart.data.datasets[0].backgroundColor.push('rgba(255, 99, 132, 0.2)');
                    myChart.data.datasets[0].borderColor.push('rgba(255, 99, 132, 1)');
                }
                if (activeCheckbox.checked) {
                    myChart.data.labels.push('Active users');
                    myChart.data.datasets[0].data.push(activeCount);
                    myChart.data.datasets[0].backgroundColor.push('rgba(54, 162, 235, 0.2)');
                    myChart.data.datasets[0].borderColor.push('rgba(54, 162, 235, 1)');
                }
                myChart.update();
            }

            blockedCheckbox.addEventListener('change', updateChart);
            activeCheckbox.addEventListener('change', updateChart);

            blockedCheckbox.checked = true;
            activeCheckbox.checked = true;
            updateChart();
        });
    </script>

    <form id="blockForm" method="post" action="/Admin/BlockUser" style="display:none;">
        <input type="hidden" id="blockFormUserId" name="BlockedUserId" />
        <input type="hidden" id="blockFormReason" name="SystemBlockReason.Reason" />
        <input type="hidden" id="blockFormUntil" name="BlockedUntil" />
    </form>

    <form id="unblockForm" method="post" action="/Admin/UnblockUser" style="display:none;">
        <input type="hidden" id="unblockFormBlockId" name="blockId" />
    </form>

    <form id="deleteForm" method="post" action="/Admin/DeleteUser" style="display:none;">
        <input type="hidden" id="deleteFormUserId" name="userId" />
    </form>
</body>
</html>
